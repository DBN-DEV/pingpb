// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/controller.proto

package gopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Controller_Heartbeat_FullMethodName      = "/controller_grpc.Controller/Heartbeat"
	Controller_GetTcpPingTask_FullMethodName = "/controller_grpc.Controller/GetTcpPingTask"
	Controller_GetPingCommand_FullMethodName = "/controller_grpc.Controller/GetPingCommand"
)

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerClient interface {
	Heartbeat(ctx context.Context, in *GrpcHeartbeatReq, opts ...grpc.CallOption) (*GrpcHeartbeatResp, error)
	GetTcpPingTask(ctx context.Context, in *GrpcTaskReq, opts ...grpc.CallOption) (*GrpcTcpPingTaskResp, error)
	GetPingCommand(ctx context.Context, in *GrpcTaskReq, opts ...grpc.CallOption) (*GrpcPingTaskResp, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Heartbeat(ctx context.Context, in *GrpcHeartbeatReq, opts ...grpc.CallOption) (*GrpcHeartbeatResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrpcHeartbeatResp)
	err := c.cc.Invoke(ctx, Controller_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetTcpPingTask(ctx context.Context, in *GrpcTaskReq, opts ...grpc.CallOption) (*GrpcTcpPingTaskResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrpcTcpPingTaskResp)
	err := c.cc.Invoke(ctx, Controller_GetTcpPingTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetPingCommand(ctx context.Context, in *GrpcTaskReq, opts ...grpc.CallOption) (*GrpcPingTaskResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrpcPingTaskResp)
	err := c.cc.Invoke(ctx, Controller_GetPingCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
// All implementations must embed UnimplementedControllerServer
// for forward compatibility.
type ControllerServer interface {
	Heartbeat(context.Context, *GrpcHeartbeatReq) (*GrpcHeartbeatResp, error)
	GetTcpPingTask(context.Context, *GrpcTaskReq) (*GrpcTcpPingTaskResp, error)
	GetPingCommand(context.Context, *GrpcTaskReq) (*GrpcPingTaskResp, error)
	mustEmbedUnimplementedControllerServer()
}

// UnimplementedControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedControllerServer struct{}

func (UnimplementedControllerServer) Heartbeat(context.Context, *GrpcHeartbeatReq) (*GrpcHeartbeatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedControllerServer) GetTcpPingTask(context.Context, *GrpcTaskReq) (*GrpcTcpPingTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTcpPingTask not implemented")
}
func (UnimplementedControllerServer) GetPingCommand(context.Context, *GrpcTaskReq) (*GrpcPingTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPingCommand not implemented")
}
func (UnimplementedControllerServer) mustEmbedUnimplementedControllerServer() {}
func (UnimplementedControllerServer) testEmbeddedByValue()                    {}

// UnsafeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServer will
// result in compilation errors.
type UnsafeControllerServer interface {
	mustEmbedUnimplementedControllerServer()
}

func RegisterControllerServer(s grpc.ServiceRegistrar, srv ControllerServer) {
	// If the following call pancis, it indicates UnimplementedControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Controller_ServiceDesc, srv)
}

func _Controller_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcHeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Controller_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Heartbeat(ctx, req.(*GrpcHeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetTcpPingTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetTcpPingTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Controller_GetTcpPingTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetTcpPingTask(ctx, req.(*GrpcTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetPingCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetPingCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Controller_GetPingCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetPingCommand(ctx, req.(*GrpcTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Controller_ServiceDesc is the grpc.ServiceDesc for Controller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Controller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controller_grpc.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _Controller_Heartbeat_Handler,
		},
		{
			MethodName: "GetTcpPingTask",
			Handler:    _Controller_GetTcpPingTask_Handler,
		},
		{
			MethodName: "GetPingCommand",
			Handler:    _Controller_GetPingCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/controller.proto",
}
