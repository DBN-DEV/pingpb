// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: proto/controller.proto

package gopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Controller_Register_FullMethodName          = "/controller_grpc.Controller/Register"
	Controller_GetTcpPingCommand_FullMethodName = "/controller_grpc.Controller/GetTcpPingCommand"
	Controller_GetPingCommand_FullMethodName    = "/controller_grpc.Controller/GetPingCommand"
	Controller_GetFpingCommand_FullMethodName   = "/controller_grpc.Controller/GetFpingCommand"
	Controller_GetMtrCommand_FullMethodName     = "/controller_grpc.Controller/GetMtrCommand"
)

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerClient interface {
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (Controller_RegisterClient, error)
	GetTcpPingCommand(ctx context.Context, in *CommandReq, opts ...grpc.CallOption) (*TcpPingCommandResp, error)
	GetPingCommand(ctx context.Context, in *CommandReq, opts ...grpc.CallOption) (*PingCommandsResp, error)
	GetFpingCommand(ctx context.Context, in *CommandReq, opts ...grpc.CallOption) (*FpingCommandResp, error)
	GetMtrCommand(ctx context.Context, in *CommandReq, opts ...grpc.CallOption) (*MtrCommandResp, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (Controller_RegisterClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Controller_ServiceDesc.Streams[0], Controller_Register_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &controllerRegisterClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_RegisterClient interface {
	Recv() (*UpdateCommandResp, error)
	grpc.ClientStream
}

type controllerRegisterClient struct {
	grpc.ClientStream
}

func (x *controllerRegisterClient) Recv() (*UpdateCommandResp, error) {
	m := new(UpdateCommandResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) GetTcpPingCommand(ctx context.Context, in *CommandReq, opts ...grpc.CallOption) (*TcpPingCommandResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TcpPingCommandResp)
	err := c.cc.Invoke(ctx, Controller_GetTcpPingCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetPingCommand(ctx context.Context, in *CommandReq, opts ...grpc.CallOption) (*PingCommandsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingCommandsResp)
	err := c.cc.Invoke(ctx, Controller_GetPingCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetFpingCommand(ctx context.Context, in *CommandReq, opts ...grpc.CallOption) (*FpingCommandResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FpingCommandResp)
	err := c.cc.Invoke(ctx, Controller_GetFpingCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetMtrCommand(ctx context.Context, in *CommandReq, opts ...grpc.CallOption) (*MtrCommandResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MtrCommandResp)
	err := c.cc.Invoke(ctx, Controller_GetMtrCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
// All implementations must embed UnimplementedControllerServer
// for forward compatibility
type ControllerServer interface {
	Register(*RegisterReq, Controller_RegisterServer) error
	GetTcpPingCommand(context.Context, *CommandReq) (*TcpPingCommandResp, error)
	GetPingCommand(context.Context, *CommandReq) (*PingCommandsResp, error)
	GetFpingCommand(context.Context, *CommandReq) (*FpingCommandResp, error)
	GetMtrCommand(context.Context, *CommandReq) (*MtrCommandResp, error)
	mustEmbedUnimplementedControllerServer()
}

// UnimplementedControllerServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (UnimplementedControllerServer) Register(*RegisterReq, Controller_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedControllerServer) GetTcpPingCommand(context.Context, *CommandReq) (*TcpPingCommandResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTcpPingCommand not implemented")
}
func (UnimplementedControllerServer) GetPingCommand(context.Context, *CommandReq) (*PingCommandsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPingCommand not implemented")
}
func (UnimplementedControllerServer) GetFpingCommand(context.Context, *CommandReq) (*FpingCommandResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFpingCommand not implemented")
}
func (UnimplementedControllerServer) GetMtrCommand(context.Context, *CommandReq) (*MtrCommandResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMtrCommand not implemented")
}
func (UnimplementedControllerServer) mustEmbedUnimplementedControllerServer() {}

// UnsafeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServer will
// result in compilation errors.
type UnsafeControllerServer interface {
	mustEmbedUnimplementedControllerServer()
}

func RegisterControllerServer(s grpc.ServiceRegistrar, srv ControllerServer) {
	s.RegisterService(&Controller_ServiceDesc, srv)
}

func _Controller_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).Register(m, &controllerRegisterServer{ServerStream: stream})
}

type Controller_RegisterServer interface {
	Send(*UpdateCommandResp) error
	grpc.ServerStream
}

type controllerRegisterServer struct {
	grpc.ServerStream
}

func (x *controllerRegisterServer) Send(m *UpdateCommandResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Controller_GetTcpPingCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetTcpPingCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Controller_GetTcpPingCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetTcpPingCommand(ctx, req.(*CommandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetPingCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetPingCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Controller_GetPingCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetPingCommand(ctx, req.(*CommandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetFpingCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetFpingCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Controller_GetFpingCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetFpingCommand(ctx, req.(*CommandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetMtrCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetMtrCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Controller_GetMtrCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetMtrCommand(ctx, req.(*CommandReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Controller_ServiceDesc is the grpc.ServiceDesc for Controller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Controller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controller_grpc.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTcpPingCommand",
			Handler:    _Controller_GetTcpPingCommand_Handler,
		},
		{
			MethodName: "GetPingCommand",
			Handler:    _Controller_GetPingCommand_Handler,
		},
		{
			MethodName: "GetFpingCommand",
			Handler:    _Controller_GetFpingCommand_Handler,
		},
		{
			MethodName: "GetMtrCommand",
			Handler:    _Controller_GetMtrCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Controller_Register_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/controller.proto",
}
